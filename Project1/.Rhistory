setwd("~/GitHub/Data607/Project1")
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
#head(chess_dataset)
tail(chess_dataset)
ds_cp_chess <- chess_dataset[-c(0:4)]
head(ds_cp_chess, 20)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
#tail(chess_dataset)
data_1 <- c(seq(1, length(ds_cp_chess), 3))
data_1
ds_cp_chess <- ds_cp_chess[sapply(ds_cp_chess, nchar) > 0]
ds_cp_chess <- ds_cp_chess[sapply(ds_cp_chess, nchar) > 0]
ds_cp_chess <- ds_cp_chess[sapply(ds_cp_chess, nchar) > 0]
head(ds_cp_chess)
data_1 <- c(seq(1, length(ds_cp_chess), 3))
data_1
data_r1 <- ds_cp_chess[data_1]
head(data_r1)
ds_cp_chess <- chess_dataset[-c(0:4)]
head(ds_cp_chess, 20)
#ds_cp_chess <- ds_cp_chess[sapply(ds_cp_chess, nchar) > 0]
#head(ds_cp_chess)
data_1 <- c(seq(1, length(ds_cp_chess), 3))
data_1
data_r1 <- ds_cp_chess[data_1]
head(data_r1)
data_r1 <- ds_cp_chess[data_1]
head(data_r1)
name <- str_extract(data_r1, "[[:alpha:]]{2,}([[:blank:]][[:alpha:]]{1,}){1,}")
head(name)
data_2 <- c(seq(2, length(ds_cp_chess), 3))
data_2
data_r2 <- ds_cp_chess[data_2]
head(data_r2)
state <- str_extract(data_r2, "[[:alpha:]]{2}")
state
pts <- str_extract(data_r1, "[[:digit:]]+\\.[[:digit:]]")
pts <- as.numeric(as.character(pts))
pts
prertg <- str_extract(data_r2, ".\\: \\s?[[:digit:]]{3,4}")
prertg
prertg <- as.numeric(str_extract(prertg, "\\(?[0-9,.]+\\)?"))
prertg
prertg <- as.numeric(str_extract(prertg, "\\(?[0-9,.]+\\)?"))
prertg
oppnum <- str_extract_all(data_r1, "[[:digit:]]{1,2}\\|")
oppnum <- str_extract_all(oppnum, "[[:digit:]]{1,2}")
oppnum <- lapply(oppnum, as.numeric)
head(oppnum)
opppreratingavg <- list()
for (i in 1:length(oppnum)){
opppreratingavg[i] <- round(mean(prertg[unlist(oppnum[i])]),2)
}
opppreratingavg <- lapply(opppreratingavg, as.numeric)
opppreratingavg <- data.frame(unlist(opppreratingavg))
df_final <- cbind.data.frame(name, state, pts, prertg, opppreratingavg)
colnames(df_final) <- c("Name", "State", "Points", "Pre_Rating", "Opp_Pre_Rating")
df_final
write.csv(df_final, "./ChessResults.csv")
write.csv(df_final, "./ChessResults.csv")
library(ggplot2)
ggplot(df_final, aes(x=Pre_Rating)) + geom_histogram(binwidth = 50)
ggplot(df_final, aes(x=Opp_Pre_Rating)) + geom_histogram(binwidth = 50)
ggplot(data = df_final, aes(x = Pre_Rating, y = Opp_Pre_Rating)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
tail(chess_dataset)
chess_dataset_cleaned <- chess_dataset[-c(0:4)]
head(chess_dataset_cleaned, 20)
chess_dataset_cleaned <- chess_dataset_cleaned[sapply(chess_dataset_cleaned, nchar) > 0]
head(chess_dataset_cleaned)
chess_dataset_cleaned <- chess_dataset_cleaned[sapply(chess_dataset_cleaned, nchar) > 0]
head(chess_dataset_cleaned)
chess_dataset_cleaned <- chess_dataset[-c(0:4)]
head(chess_dataset_cleaned, 15)
chess_dataset_cleaned <- chess_dataset_cleaned[sapply(chess_dataset_cleaned, nchar) > 0]
head(chess_dataset_cleaned)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
#head(chess_dataset)
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
#head(chess_dataset)
#tail(chess_dataset)
chess_dataset
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
#head(chess_dataset)
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
-------------------------------
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
#-------------------------------
tail(chess_dataset)
data_1 <- c(seq(1, length(chess_dataset_cleaned), 3))
data_1
ourSeq <- chess_dataset_cleaned[data_1]
head(ourSeq)
ourSeq_rows <- c(seq(1, length(chess_dataset_cleaned), 3))
ourSeq_rows
ourSeq_data <- chess_dataset_cleaned[ourSeq_rows]
head(ourSeq_data)
ourSeq_data <- chess_dataset_cleaned[ourSeq_rows]
head(ourSeq_data)
name <- str_extract(data_r1, "[[:alpha:]]{2,}([[:blank:]][[:alpha:]]{1,}){1,}")
head(name)
name <- str_extract(ourSeq_data, "[[:alpha:]]{2,}([[:blank:]][[:alpha:]]{1,}){1,}")
head(name)
name <- str_extract(ourSeq_data, "[[:alpha:]]{2,}([[:blank:]][[:alpha:]]{1,}){1,}")
head(name)
data_2 <- c(seq(2, length(chess_dataset_cleaned), 3))
data_2
ourseq2 <- c(seq(2, length(chess_dataset_cleaned), 3))
ourseq2
names <- str_extract(ourSeq_data, "[[:alpha:]]{2,}([[:blank:]][[:alpha:]]{1,}){1,}")
head(names)
names <- str_extract(ourSeq_data, "[[:alpha:]]{2,}([[:blank:]][[:alpha:]]{1,}){1,}")
head(names)
ourSeq2_data <- chess_dataset_cleaned[ourseq2]
head(ourSeq2_data)
ourSeq2_data <- chess_dataset_cleaned[ourseq2]
head(ourSeq2_data)
states <- str_extract(ourSeq2_data, "[[:alpha:]]{2}")
states
thepoints <- str_extract(ourSeq_data, "[[:digit:]]+\\.[[:digit:]]")
thepoints <- as.numeric(as.character(thepoints))
thepoints
pre_ratings <- str_extract(ourSeq2_data, ".\\: \\s?[[:digit:]]{3,4}")
pre_ratings
pre_ratings <- as.numeric(str_extract(pre_ratings, "\\(?[0-9,.]+\\)?"))
pre_ratings
oppnum <- str_extract_all(data_r1, "[[:digit:]]{1,2}\\|")
oppnum <- str_extract_all(oppnum, "[[:digit:]]{1,2}")
oppnum <- lapply(oppnum, as.numeric)
head(oppnum)
opponent_numbers <- str_extract_all(ourSeq_data, "[[:digit:]]{1,2}\\|")
opponent_numbers <- str_extract_all(opponent_numbers, "[[:digit:]]{1,2}")
opponent_numbers <- lapply(opponent_numbers, as.numeric)
head(opponent_numbers)
opponent_numbers <- str_extract_all(ourSeq_data, "[[:digit:]]{1,2}\\|")
opponent_numbers <- str_extract_all(opponent_numbers, "[[:digit:]]{1,2}")
opponent_numbers <- lapply(opponent_numbers, as.numeric)
head(opponent_numbers)
opponent_prerating_average <- list()
for (i in 1:length(oppnum)){
opponent_prerating_average[i] <- round(mean(prertg[unlist(oppnum[i])]),2)
}
opponent_prerating_average <- lapply(opponent_prerating_average, as.numeric)
opponent_prerating_average <- data.frame(unlist(opponent_prerating_average))
df_final <- cbind.data.frame(name, state, pts, prertg, opponent_prerating_average)
colnames(df_final) <- c("Name", "State", "Points", "Pre_Rating", "Opp_Pre_Rating")
df_final
opponent_prerating_average <- list()
for (i in 1:length(opponent_numbers)){
opponent_prerating_average[i] <- round(mean(pre_ratings[unlist(opponent_numbers[i])]),2)
}
opponent_prerating_average <- lapply(opponent_prerating_average, as.numeric)
opponent_prerating_average <- data.frame(unlist(opponent_prerating_average))
df_final <- cbind.data.frame(names, states, thepoints, pre_ratings, opponent_prerating_average)
colnames(df_final) <- c("Name", "State", "Points", "Pre_Rating", "Opponent_Pre_Rating")
df_final
opponent_prerating_average <- list()
for (i in 1:length(opponent_numbers)){
opponent_prerating_average[i] <- round(mean(pre_ratings[unlist(opponent_numbers[i])]),2)
}
opponent_prerating_average <- lapply(opponent_prerating_average, as.numeric)
opponent_prerating_average <- data.frame(unlist(opponent_prerating_average))
ourFinalTable <- cbind.data.frame(names, states, thepoints, pre_ratings, opponent_prerating_average)
colnames(ourFinalTable) <- c("Name", "State", "Points", "Pre_Rating", "Opponent_Pre_Rating")
ourFinalTable
opponent_prerating_average <- list()
for (i in 1:length(opponent_numbers)){
opponent_prerating_average[i] <- round(mean(pre_ratings[unlist(opponent_numbers[i])]),2)
}
opponent_prerating_average <- lapply(opponent_prerating_average, as.numeric)
opponent_prerating_average <- data.frame(unlist(opponent_prerating_average))
ourFinalTable <- cbind.data.frame(names, states, thepoints, pre_ratings, opponent_prerating_average)
colnames(ourFinalTable) <- c("Player_Name", "Player_State", "Player_Points", "Player_Pre_Rating", "Opponent_Pre_Rating")
ourFinalTable
pre_ratings <- as.numeric(str_extract(pre_ratings, "\\(?[0-9,.]+\\)?"))
pre_ratings
opponent_numbers <- str_extract_all(ourSeq_data, "[[:digit:]]{1,2}\\|")
opponent_numbers <- str_extract_all(opponent_numbers, "[[:digit:]]{1,2}")
opponent_numbers <- lapply(opponent_numbers, as.numeric)
head(opponent_numbers)
opponent_prerating_average <- list()
for (i in 1:length(opponent_numbers)){
opponent_prerating_average[i] <- round(mean(pre_ratings[unlist(opponent_numbers[i])]),2)
}
opponent_prerating_average <- lapply(opponent_prerating_average, as.numeric)
opponent_prerating_average <- data.frame(unlist(opponent_prerating_average))
ourFinalTable <- cbind.data.frame(names, states, thepoints, pre_ratings, opponent_prerating_average)
colnames(ourFinalTable) <- c("Player_Name", "Player_State", "Player_Points", "Player_Pre_Rating", "Opponent_Pre_Rating_AVG")
ourFinalTable
write.csv(ourFinalTable, "./Results.csv")
library(ggplot2)
ggplot(ourFinalTable, aes(x=Pre_Rating)) + geom_histogram(binwidth = 50)
library(ggplot2)
ggplot(ourFinalTable, aes(x=pre_ratings)) + geom_histogram(binwidth = 50)
ggplot(ourFinalTable, aes(x=opponent_prerating_average)) + geom_histogram(binwidth = 50)
library(ggplot2)
ggplot(ourFinalTable, aes(x=pre_ratings)) + geom_histogram(binwidth = 50)
ggplot(ourFinalTable, aes(x=opponent_prerating_average)) + geom_histogram(binwidth = 50)
write.csv(ourFinalTable, "./Results.csv")
library(ggplot2)
ggplot(df_final, aes(x=Pre_Rating)) + geom_histogram(binwidth = 50)
ggplot(df_final, aes(x=Opp_Pre_Rating)) + geom_histogram(binwidth = 50)
opppreratingavg <- list()
for (i in 1:length(oppnum)){
opppreratingavg[i] <- round(mean(prertg[unlist(oppnum[i])]),2)
}
opppreratingavg <- lapply(opppreratingavg, as.numeric)
opppreratingavg <- data.frame(unlist(opppreratingavg))
df_final <- cbind.data.frame(name, state, pts, prertg, opppreratingavg)
colnames(df_final) <- c("Name", "State", "Points", "Pre_Rating", "Opp_Pre_Rating")
df_final
write.csv(df_final, "./ChessResults.csv")
library(ggplot2)
ggplot(df_final, aes(x=Pre_Rating)) + geom_histogram(binwidth = 50)
ggplot(df_final, aes(x=Opp_Pre_Rating)) + geom_histogram(binwidth = 50)
ggplot(data = df_final, aes(x = Pre_Rating, y = Opp_Pre_Rating)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
library(ggplot2)
ggplot(ourFinalTable, aes(x=Player_Pre_Rating)) + geom_histogram(binwidth = 50)
ggplot(ourFinalTable, aes(x=Opponent_Pre_Rating_AVG)) + geom_histogram(binwidth = 50)
ggplot(data = ourFinalTable, aes(x = Player_Pre_Rating, y = Opponent_Pre_Rating_AVG)) + geom_point(color='blue') + geom_smooth(method = "lm", se = FALSE)
library(ggplot2)
ggplot(ourFinalTable, aes(x=Player_Pre_Rating)) + geom_histogram(binwidth = 50)
ggplot(ourFinalTable, aes(x=Opponent_Pre_Rating_AVG)) + geom_histogram(binwidth = 50)
ggplot(data = ourFinalTable, aes(x = Player_Pre_Rating, y = Opponent_Pre_Rating_AVG)) + geom_point(color='red') + geom_smooth(method = "lm", se = FALSE)
library(stringr)
chess_dataset <- readLines("https://raw.githubusercontent.com/theoracley/Data607/master/Project1/tournamentinfo.txt")
#chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
#-------------------------------
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("https://raw.githubusercontent.com/theoracley/Data607/master/Project1/tournamentinfo.txt")
#chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
#*************************************
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines("https://raw.githubusercontent.com/theoracley/Data607/master/Project1/tournamentinfo.txt")
#chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
*************************************
library(stringr)
chess_dataset <- readLines("https://raw.githubusercontent.com/theoracley/Data607/master/Project1/tournamentinfo.txt")
#chess_dataset <- readLines("./tournamentinfo.txt")
head(chess_dataset)
print("*************************************")
tail(chess_dataset)
library(stringr)
chess_dataset <- readLines('https://raw.githubusercontent.com/theoracley/Data607/master/Project1/tournamentinfo.txt')
#chess_dataset <- readLines('https://github.com/theoracley/Data607/blob/master/Project1/tournamentinfo.txt')
head(chess_dataset)
tail(chess_dataset)
setwd("~/GitHub/Data607/Project1")
cls
